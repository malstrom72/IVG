/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ./ivg.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var ivgHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "string.other.svgpath",
            regex: /\[M[^\]]*\]/,
            caseInsensitive: true
        }, {
            include: "#impd"
        }, {
            token: "constant.numeric.color.ivg",
            regex: /(?<![a-zA-Z0-9])#[0-9A-Fa-f]{6,8}/
        }, {
            token: "constant.numeric.hex.ivg",
            regex: /(?<![a-zA-Z0-9])#[0-9A-Fa-f]{2}/
        }, {
            token: "constant.language.colors.ivg",
            regex: /\b(?:none|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)\b/,
            caseInsensitive: true
        }, {
            token: "constant.language.other.ivg",
            regex: /\b(?:linear|radial|butt|round|square|bevel|curve|miter|non-zero|even-odd|left|center|right|top|middle|bottom left|center|right)\b/,
            caseInsensitive: true
        }, {
            token: "support.function.color.ivg",
            regex: /\b(?:rgb|hsv)(?=\()/,
            caseInsensitive: true
        }, {
            token: "support.function.instruction.ivg",
            regex: /\b(?:rect|line|ellipse)\b/,
            caseInsensitive: true
        }, {
            token: "support.function.instruction.ivg",
            regex: /\b(?:bounds|context|options|pen|fill|mask|reset|RECT|ELLIPSE|STAR|PATH|WIPE)\b/,
            caseInsensitive: true
        }, {
            token: "support.function.transformation.ivg",
            regex: /\b(?:offset|scale|rotate|shear|matrix)\b/,
            caseInsensitive: true
        }, {
            token: "support.function.instruction.ivg",
            regex: /\b(?:define\s+font|define\s+image|font|TEXT|IMAGE)\b/,
            caseInsensitive: true
        }],
        "#impd": [{
            include: "#stringEscape"
        }, {
            include: "#string"
        }, {
            include: "#comment"
        }, {
            include: "#expression"
        }, {
            include: "#assignment"
        }, {
            include: "#constant"
        }, {
            include: "#variable"
        }, {
            include: "#number"
        }, {
            include: "#function"
        }, {
            include: "#instruction"
        }, {
            include: "#label"
        }],
        "#expression": [{
            token: "meta.expression.impd",
            regex: /{/,
            push: [{
                token: "meta.expression.impd",
                regex: /}/,
                next: "pop"
            }, {
                include: "#impd"
            }, {
                include: "#function"
            }, {
                defaultToken: "meta.expression.impd"
            }]
        }],
        "#comment": [{
            token: "punctuation.definition.comment.impd",
            regex: /\/\*\*/,
            push: [{
                token: "punctuation.definition.comment.impd",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.documentation.impd"
            }]
        }, {
            token: "punctuation.definition.comment.impd",
            regex: /\/\*/,
            push: [{
                token: "punctuation.definition.comment.impd",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.impd"
            }]
        }, {
            token: "comment.line.double-slash.impd",
            regex: /\/\/.*(?=[\n])/
        }],
        "#assignment": [{
            token: "storage.impd",
            regex: /\b[a-zA-Z$_][a-zA-Z0-9$_]*(?=\s*=\s*)/
        }],
        "#label": [{
            token: "entity.name.label.impd",
            regex: /\b[a-zA-Z$_][a-zA-Z0-9$_]*(?=\s*:)/
        }],
        "#variable": [{
            token: "variable.other.impd",
            regex: /[$][a-zA-Z0-9$_.]+/
        }],
        "#constant": [{
            token: "constant.language.impd",
            regex: /\b(?:yes|no)\b/,
            caseInsensitive: true
        }, {
            token: "constant.language.impd",
            regex: /\bpi\b/,
            caseInsensitive: true
        }],
        "#instruction": [{
            token: [
                "text",
                "string.other.impd",
                "text",
                "string.other.impd"
            ],
            regex: /\b(format\s*)(\S*)(\s*requires\s*:\s*)(\S*)/,
            caseInsensitive: true,
            push: [{
                token: [],
                regex: /(?=.)/,
                next: "pop"
            }]
        }, {
            token: "entity.name.function.impd",
            regex: /\b(?:format|meta|debug|trace|stop|call|include|local|return|if|repeat|for)\b/,
            caseInsensitive: true
        }],
        "#number": [{
            token: "constant.numeric.hex.impd",
            regex: /(?<![a-zA-Z0-9])0x[0-9A-Fa-f]+/
        }, {
            token: "constant.numeric.impd",
            regex: /(?<![a-zA-Z0-9])[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?(?:\s*%)?/
        }],
        "#function": [{
            token: "support.function.math.impd",
            regex: /\b(?:abs|acos|asin|atan|ceil|cos|cosh|exp|floor|log|log10|sin|sinh|sqrt|tan|tanh)(?=\()/,
            caseInsensitive: true
        }, {
            token: "support.function.other.impd",
            regex: /\blen(?=\()/,
            caseInsensitive: true
        }],
        "#string": [{
            token: "string.quoted.double.impd",
            regex: /"/,
            push: [{
                token: "string.quoted.double.impd",
                regex: /"/,
                next: "pop"
            }, {
                include: "#stringEscape"
            }, {
                defaultToken: "string.quoted.double.impd"
            }]
        }],
        "#stringEscape": [{
            token: "constant.character.escape.bigint.impd",
            regex: /\\U[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]/,
            caseInsensitive: false
        }, {
            token: "constant.character.escape.unicode.impd",
            regex: /\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]/,
            caseInsensitive: false
        }, {
            token: "constant.character.escape.hex.impd",
            regex: /\\x[0-9A-Fa-f][0-9A-Fa-f]/,
            caseInsensitive: false
        }, {
            token: "constant.character.escape.decimal.impd",
            regex: /\\[0-9]+/,
            caseInsensitive: false
        }, {
            token: "constant.character.escape.impd",
            regex: /\\./,
            caseInsensitive: false
        }]
    }
    
    this.normalizeRules();
};

ivgHighlightRules.metaData = {
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    name: "ivg",
    scopeName: "source.ivg"
}


oop.inherits(ivgHighlightRules, TextHighlightRules);

exports.ivgHighlightRules = ivgHighlightRules;
});